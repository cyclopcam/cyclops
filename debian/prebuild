#!/bin/bash
set -euo pipefail

if [[ $# -ne 2 ]]; then
	echo "Usage: $0 <build number> <remote>"
	echo "<build number> is usually 1, but could be more if this is not the first build attempt"
	echo "<remote> is one of:"
	echo "  s3://files.cyclopcam.org/incoming/"
	echo "  user@host:/path/to/incoming/"
	exit 1
fi
BUILD_NUMBER=$1
REMOTE=$2

MAKEJ=-j8

SUDO=sudo
if [ "$(id -u)" -eq 0 ]; then
	# Running as root, so don't use sudo
	SUDO=""
fi

# We separate the prebuild step because it takes long to run, and for iterating
# on the build process, we want to be able to skip it.

# Note: we don't actually need wireguard and wireguard-tools to build, but we do need them to test, which is why I include them here.

$SUDO apt-get install -y build-essential cmake devscripts debhelper-compat libturbojpeg0-dev pkg-config libavformat-dev libswscale-dev wireguard wireguard-tools

# On raspbian, install hailofw hailort:
# Sigh.. I can't figure out how to detect if we're running on Raspberry Pi OS. All the usual markers just point at "bookworm" or "debian".
if grep -q "Raspberry" /proc/cpuinfo && [ -f /boot/config.txt ]; then
    echo "Running on Raspberry Pi OS"
	$SUDO apt-get install -y hailofw hailort
	MAKEJ=-j4
fi

GOVERSION=1.24.2
GOARCH=$(uname -m)
if [ "$GOARCH" = "aarch64" ]; then
	GOARCH=arm64
fi
if [ "$GOARCH" = "x86_64" ]; then
	GOARCH=amd64
fi

# Install awscli
# meh... we can just rsync to a local build server. No need to round-trip via S3.
#if [ ! -f /usr/local/bin/aws ]; then
#	echo Installing awscli
#	curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#	unzip awscliv2.zip
#	$SUDO ./aws/install
#fi

# Install Go
if [ ! -f /usr/local/go/bin/go ]; then
	echo Installing Go $GOVERSION
	GOARCHIVE=go$GOVERSION.linux-$GOARCH.tar.gz
	curl -o $GOARCHIVE https://dl.google.com/go/$GOARCHIVE
	$SUDO tar -C /usr/local -xzf $GOARCHIVE
fi
export PATH=$PATH:/usr/local/go/bin

# Use nvm to install Node.js
if [ ! -d ~/.nvm ]; then
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm	
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

nvm install 18
nvm use 18

echo Building www
cd www && npm install && npm run build && cd ..

echo "Building Hailo accelerator"
cd nnaccel/hailo && ./build && cd ../..

if [ ! -f ncnn/build/src/libncnn.a ]; then
	echo Building NCNN library
	cd ncnn && mkdir -p build && cd build && cmake -DNCNN_SIMPLEOCV=1 -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_BUILD_TOOLS=OFF .. && make $MAKEJ && cd ../..
else
	echo Skipping NCNN, already built
fi

if [ ! -f Simd/build/libSimd.a ]; then
	echo Building Simd library
	cd Simd && mkdir -p build && cd build && cmake -DSIMD_TEST=OFF ../prj/cmake && make $MAKEJ && cd ../..
else
	echo Skipping Simd, already built
fi

